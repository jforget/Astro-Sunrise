#!/usr/bin/perl -I../../DateTime-Event-Sunrise/lib -I../lib
# -*- encoding: utf-8; indent-tabs-mode: nil -*-
#
#     Script to check the work-in-progress version of DateTime::Event::Sunrise
#     Copyright (c) 2020, 2021, 2023 Jean Forget
#
#     See the license in the embedded documentation below.
#

use v5.10;
use strict;
use warnings;
use DateTime;
use DateTime::Event::Sunrise;
use Astro::Sunrise;

my $lat =   61.2; #  61°12' for  61°13'5.01"
my $lon = -149.9; # 149°54' for 149°54'1.02"

# https://www.esrl.noaa.gov/gmd/grad/solcalc/table.php?lat=61.2&lon=-149.9&year=2020
my @noaa_rise = qw/ dummy 04:35 04:33 04:32 04:30 04:29 04:28 04:27 04:26 04:25 04:24
                          04:23 04:22 04:22 04:21 04:21 04:21 04:20 04:20 04:20 04:20
                          04:21 04:21 04:21 04:22 04:23 04:23 04:24 04:25 04:26 04:27 /;
my @noaa_set  = qw/ dummy 23:22 23:23 23:25 23:27 23:29 23:30 23:32 23:33 23:34 23:35
                          23:37 23:38 23:39 23:39 23:40 23:41 23:41 23:42 23:42 23:42
                          23:42 23:42 23:42 23:42 23:42 23:41 23:41 23:40 23:40 23:39 /;

my @stel_rise = qw/ dummy 04:34:47 04:33:13 04:31:44 04:30:19 04:28:59 04:27:45 04:26:35 04:25:30 04:24:31 04:23:38
                          04:22:50 04:22:08 04:21:32 04:21:02 04:20:38 04:20:21 04:20:09 04:20:04 04:20:05 04:20:13
                          04:20:27 04:20:47 04:21:13 04:21:46 04:22:24 04:23:09 04:23:59 04:24:56 04:25:57 04:27:05 /;

my @stel_set  = qw/ dummy 23:21:51 23:23:41 23:25:28 23:27:10 23:28:47 23:30:20 23:31:49 23:33:12 23:34:31 23:35:44
                          23:36:52 23:37:54 23:38:51 23:39:41 23:40:26 23:41:05 23:41:37 23:42:03 23:42:24 23:42:37
                          23:42:44 23:42:45 23:42:40 23:42:28 23:42:10 23:41:46 23:41:15 23:40:39 23:39:56 23:39:08 /;

my $sunriseset0 = DateTime::Event::Sunrise->new(
                     longitude => $lon,
                     latitude  => $lat,
                     altitude  => -0.833,
                     precise   => 0);
my $sunriseset1 = DateTime::Event::Sunrise->new(
                     longitude  => $lon,
                     latitude   => $lat,
                     altitude   => -0.833,
                     upper_limb => 0,
                     precise    => 1);

my $dt = DateTime->new(
                year   => 2020,
                month  => 6,
                day    => 1,
                time_zone => 'America/Anchorage');

for my $i (1 .. 30) {
    $dt->set(day => $i);
    my ($sunrise0, $sunset0) = sunrise ( { year => $dt->year, month   => $dt->month, day      => $dt->day,
                                           lon  => $lon,      lat     => $lat,       altitude => -0.833,
                                           tz   => -8,        precise => 0,
                                           #trace => *STDOUT,
                                        });
    my ($sunrise1, $sunset1) = sunrise ( { year => $dt->year, month   => $dt->month, day      => $dt->day,
                                          lon   => $lon,      lat     => $lat,       altitude => -0.833,
                                          tz    => -8,        precise => 1,
                                          #trace => *STDOUT,
                                        });
    my $hms0r = $sunriseset0->sunrise_datetime($dt)->hms;
    my $hms0s = $sunriseset0->sunset_datetime ($dt)->hms;
    my $hms1r = $sunriseset1->sunrise_datetime($dt)->hms;
    my $hms1s = $sunriseset1->sunset_datetime ($dt)->hms;
    my $delta0r = sprintf "(%3d)", delta_hms($stel_rise[$i], $hms0r);
    my $delta0s = sprintf "(%3d)", delta_hms($stel_set [$i], $hms0s);
    my $delta1r = sprintf "(%3d)", delta_hms($stel_rise[$i], $hms1r);
    my $delta1s = sprintf "(%3d)", delta_hms($stel_set [$i], $hms1s);
    say join "  ", $dt->ymd, $sunrise0, $sunrise1, $noaa_rise[$i], $stel_rise[$i], "$hms0r $delta0r", "$hms1r $delta1r"
                           , $sunset0 , $sunset1,  $noaa_set [$i], $stel_set [$i], "$hms0s $delta0s", "$hms1s $delta1s"
};

sub delta_hms {
  my ($hms1, $hms2) = @_;
  return to_sec($hms2) - to_sec($hms1);
}
sub to_sec {
  my ($hms) = @_;
  my ($hh, $mm, $ss) = split ':', $hms;
  return (60 * $hh + $mm) * 60 + $ss;
}

__END__

=encoding utf8

=head1 NAME

check-Anchorage-June - Comparing the work-in-progress version of DateTime::Event::Sunrise with Stellarium and the NOAA website

=head1 DESCRIPTION

This   program   runs    the   not-yet-released-to-CPAN   version   of
DT::E::Sunrise, by computing the sunrise and sunset times in Anchorage
in June  2020, and comparing  with values copied-pasted from  the NOAA
solar calculator webpage and from Stellarium.

This program displays the values for sunrise and sunset produced by:

=over 4

=item * L<Astro::Sunrise>, basic algorithm

=item * L<Astro::Sunrise>, precise algorithm

=item * The NOAA solar calculator webpage

=item * Stellarium

=item * L<DateTime::Event::Sunrise>, basic algorithm

=item * L<DateTime::Event::Sunrise>, precise algorithm

=back

In the last two cases, the  program computes the difference in seconds
with the Stellarium value.

=head2 Why Anchorage?

I want to check the "precise" algorithm of DT::E::Sunrise. The precise
algorithm  gives  significantly  different   results  from  the  basic
algorithm when  switching from a "day  + night" period to  a "midnight
sun" period  or the other way.  For location near a  Polar Circle, the
precise  algorithm  gives  significantly different  results  near  the
summer solstice (June in the Northern hemisphere).

So it was Reykjavik or Anchorage.

Another point is  that I have tested Astro::Sunrise  with locations on
the Greenwich  meridian, and so  I missed a  bug which would  be minor
near said Greenwich  meridian but significant at  far away longitudes.
So  I decided  to use  Anchorage (61°N,  171°W) rather  than Reykjavik
(64°N, 22°W)

=head2 Data

The version  of Stellarium installed  on my  PC is version  0.15.0, in
which I  cannot select the time  zone depending on the  location. So I
had to  use the system  time zone on my  computer and then  convert to
Anchorage local time zone.

Then I created  a Focal Fossa xubuntu virtual machine  and I installed
Stellarium on this  machine, which was version  0.19.3, which supports
time zones. So I had no longer  the trouble with time conversion and I
double-checked the previous results.

    Stellarium  UTC-8      UTC-8
    2020-06-01  04:34:47   23:21:51
    2020-06-02  04:33:13   23:23:41
    2020-06-03  04:31:44   23:25:28
    2020-06-04  04:30:19   23:27:10
    2020-06-05  04:28:59   23:28:47
    2020-06-06  04:27:45   23:30:20
    2020-06-07  04:26:35   23:31:49
    2020-06-08  04:25:30   23:33:12
    2020-06-09  04:24:31   23:34:31
    2020-06-10  04:23:38   23:35:44
    2020-06-11  04:22:50   23:36:52
    2020-06-12  04:22:08   23:37:54
    2020-06-13  04:21:32   23:38:51
    2020-06-14  04:21:02   23:39:41
    2020-06-15  04:20:38   23:40:26
    2020-06-16  04:20:21   23:41:05
    2020-06-17  04:20:09   23:41:37
    2020-06-18  04:20:04   23:42:03
    2020-06-19  04:20:05   23:42:24
    2020-06-20  04:20:13   23:42:37
    2020-06-21  04:20:27   23:42:44
    2020-06-22  04:20:47   23:42:45
    2020-06-23  04:21:13   23:42:40
    2020-06-24  04:21:46   23:42:28
    2020-06-25  04:22:24   23:42:10
    2020-06-26  04:23:09   23:41:46
    2020-06-27  04:23:59   23:41:15
    2020-06-28  04:24:56   23:40:39
    2020-06-29  04:25:57   23:39:56
    2020-06-30  04:27:05   23:39:08

=head2 First Conclusions

First, Stellarium and the NOAA solar calc seem to agree.

Strangely, the basic algorithm gives results closer to Stellarium, but
with a  big variability:  -29 to  +37 seconds for  sunrise, -60  to +4
seconds for  sunset. On  the other hand,  the precise  algorithm gives
results  farther to  the  Stellarium references,  but  with much  less
variability: 102 ± 2 seconds for sunrise, -110 ± 2 seconds for sunset.

Replacing  the   altitude  with   0.583  degree  and   activating  the
C<upper_limb> option improves the results,  but barely. So this is not
the solution.

Yet, at 61°N, we  are still a long way from the  Arctic circle and the
night is always more than 4 h 30 mn. So we are not in the domain where
the  precise algorithm  gives  results significantly  better than  the
basic algorithm. Maybe I should try also Reykjavik after all.

=head1 USAGE

Here are  some guidelines to run  the program. Of course,  you have to
adapt  these instructions,  especially the  directory names  which are
different between your system and mine.

=head2 First Run

Make sure  that all prerequisites for  C<DateTime::Event::Sunrise> are
installed:   C<DateTime>,  C<DateTime::Duration>,   C<DateTime::Span>,
C<DateTime::Spanset>, C<POSIX>, C<Math::Trig>. Use your distribution's
package   manager    or   C<CPAN.pm>   or   cpanminus    (C<cpanm>   /
C<App::cpanminus>).

  cd /home/me/prog-workbench
  git clone https://github.com/jforget/DateTime-Event-Sunrise.git
  git clone https://github.com/jforget/Astro-Sunrise.git
  cd Astro-Sunrise/util
  ./check-Anchorage-June

=head2 Next Runs

  cd /home/me/prog-workbench/DateTime-Event-Sunrise
  git pull
  cd ../Astro-Sunrise
  git pull
  cd util
  ./check-Anchorage-June

=head1 SEE ALSO

L<https://www.esrl.noaa.gov/gmd/grad/solcalc/table.php?lat=61.2&lon=-149.9&year=2020>

L<http://stellarium.org/>

L<https://github.com/jforget/Astro-Sunrise/blob/master/doc/astronomical-notes.md>

=head1 COPYRIGHT

Copyright  (c)  2020, 2021, 2023 Jean  Forget.  All rights  reserved.  This
program is  free software;  you can redistribute  it and/or  modify it
under the same  terms as Perl itself: GNU Public  License version 1 or
later and Perl Artistic License.

The full text of the license can be found in the F<LICENSE> file at
L<https://dev.perl.org/licenses/artistic.html>
and L<https://www.gnu.org/licenses/gpl-1.0.html>.

Here is the summary of GPL:

This program is  free software; you can redistribute  it and/or modify
it under the  terms of the GNU General Public  License as published by
the Free  Software Foundation; either  version 1, or (at  your option)
any later version.

This program  is distributed in the  hope that it will  be useful, but
WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
General Public License for more details.

You  should have received  a copy  of the  GNU General  Public License
along with this program; if not, see <https://www.gnu.org/licenses/> or
write to the Free Software Foundation, Inc., L<https://fsf.org>.

