#!/usr/bin/perl -I../../DateTime-Event-Sunrise/lib
# -*- encoding: utf-8; indent-tabs-mode: nil -*-
#
#     Script to check the work-in-progress version of DateTime::Event::Sunrise 
#     Copyright (c) 2020, 2021 Jean Forget
#
#     See the license in the embedded documentation below.
#

use v5.10;
use strict;
use warnings;
use DateTime;
use DateTime::Event::Sunrise;
use Astro::Sunrise;

my $lat =  42.3358; # 42°20'08"
my $lon = -71.2044; # 71°12'15"

# https://www.esrl.noaa.gov/gmd/grad/solcalc/table.php?lat=42.3358&lon=-71.2044&year=2020
my @noaa_rise = qw/ dummy 06:26 06:25 06:23 06:21 06:20 06:18 06:16 06:15 06:13 06:11 
                          06:10 06:08 06:06 06:05 06:03 06:02 06:00 05:58 05:57 05:55 
                          05:54 05:52 05:51 05:49 05:48 05:46 05:45 05:44 05:42 05:11 /;
my @noaa_set  = qw/ dummy 19:11 19:12 19:13 19:15 19:16 19:17 19:18 19:19 19:20 19:21 
                          19:22 19:24 19:25 19:26 19:27 19:28 19:29 19:30 19:32 19:33 
                          19:34 19:35 19:36 19:37 19:38 19:39 19:41 19:42 19:43 19:44 /;

my @stel_rise = qw/ dummy 06:26:29 06:24:46 06:23:04 06:21:22 06:19:40 06:17:58 06:16:17 06:14:37 06:12:57 06:11:17
                          06:09:38 06:08:00 06:06:22 06:04:45 06:03:09 06:01:33 05:59:58 05:58:24 05:56:51 05:55:19
                          05:53:47 05:52:16 05:50:47 05:49:18 05:47:50 05:46:24 05:44:58 05:43:34 05:42:10 05:40:48 /;
my @stel_set  = qw/ dummy 19:11:19 19:12:27 19:13:34 19:14:42 19:15:49 19:16:56 19:18:04 19:19:11 19:20:18 19:21:26
                          19:22:33 19:23:41 19:24:48 19:25:56 19:27:03 19:28:11 19:29:19 19:30:26 19:31:34 19:32:42
                          19:33:49 19:34:57 19:36:05 19:37:12 19:38:20 19:39:27 19:40:34 19:41:41 19:42:48 19:43:55 /;

my $sunriseset0 = DateTime::Event::Sunrise->new(
                     longitude => $lon,
                     latitude  => $lat,
                     altitude  => -0.833,
                     precise   => 0);
my $sunriseset1 = DateTime::Event::Sunrise->new(
                     longitude => $lon,
                     latitude  => $lat,
                     altitude  => -0.833,
                     algo      => 'Stellarium',
                     precise   => 1);

my $dt = DateTime->new(
                year      => 2020,
                month     =>    4, 
                day       =>   12,
                time_zone => 'America/New_York');

for my $i (1 .. 30) {
    $dt->set(day => $i);
    my ($sunrise0, $sunset0) = sunrise ( { year  => $dt->year, month   => $dt->month, day      => $dt->day,
                                          lon    => $lon,      lat     => $lat,       altitude => -0.833,
                                          tz     => -4,        precise => 0,
                                          #trace => *STDOUT,
                                        });
    my ($sunrise1, $sunset1) = sunrise ( { year  => $dt->year, month   => $dt->month, day      => $dt->day,
                                          lon    => $lon,      lat     => $lat,       altitude => -0.833,
                                          tz     => -4,        precise => 1,
                                          #trace => *STDOUT,
                                        });
    my $hms0r = $sunriseset0->sunrise_datetime($dt)->hms;
    my $hms0s = $sunriseset0->sunset_datetime ($dt)->hms;
    my $hms1r = $sunriseset1->sunrise_datetime($dt)->hms;
    my $hms1s = $sunriseset1->sunset_datetime ($dt)->hms;
    my $delta0r = sprintf "(%3d)", delta_hms($stel_rise[$i], $hms0r);
    my $delta0s = sprintf "(%3d)", delta_hms($stel_set [$i], $hms0s);
    my $delta1r = sprintf "(%3d)", delta_hms($stel_rise[$i], $hms1r);
    my $delta1s = sprintf "(%3d)", delta_hms($stel_set [$i], $hms1s);
    say join "  ", $dt->ymd, $sunrise0, $sunrise1, $noaa_rise[$i],$stel_rise[$i], "$hms0r $delta0r", "$hms1r $delta1r"
                           , $sunset0 , $sunset1,  $noaa_set [$i],$stel_set [$i], "$hms0s $delta0s", "$hms1s $delta1s"
};

sub delta_hms {
  my ($hms1, $hms2) = @_;
  return to_sec($hms2) - to_sec($hms1);
}
sub to_sec {
  my ($hms) = @_;
  my ($hh, $mm, $ss) = split ':', $hms;
  return (60 * $hh + $mm) * 60 + $ss;
}

__END__

# Stellarium 0.19.3
Date        UTC-4     UTC-4
2020-04-01  06:26:29  19:11:19
2020-04-02  06:24:46  19:12:27
2020-04-03  06:23:04  19:13:34
2020-04-04  06:21:22  19:14:42
2020-04-05  06:19:40  19:15:49
2020-04-06  06:17:58  19:16:56
2020-04-07  06:16:17  19:18:04
2020-04-08  06:14:37  19:19:11
2020-04-09  06:12:57  19:20:18
2020-04-10  06:11:17  19:21:26
2020-04-11  06:09:38  19:22:33
2020-04-12  06:08:00  19:23:41
2020-04-13  06:06:22  19:24:48
2020-04-14  06:04:45  19:25:56
2020-04-15  06:03:09  19:27:03
2020-04-16  06:01:33  19:28:11
2020-04-17  05:59:58  19:29:19
2020-04-18  05:58:24  19:30:26
2020-04-19  05:56:51  19:31:34
2020-04-20  05:55:19  19:32:42
2020-04-21  05:53:47  19:33:49
2020-04-22  05:52:16  19:34:57
2020-04-23  05:50:47  19:36:05
2020-04-24  05:49:18  19:37:12
2020-04-25  05:47:50  19:38:20
2020-04-26  05:46:24  19:39:27
2020-04-27  05:44:58  19:40:34
2020-04-28  05:43:34  19:41:41
2020-04-29  05:42:10  19:42:48
2020-04-30  05:40:48  19:43:55


=encoding utf8

=head1 NAME

check-Boston-April - Comparing the work-in-progress version of DateTime::Event::Sunrise with Stellarium and the NOAA website

=head1 DESCRIPTION

This   program   runs    the   not-yet-released-to-CPAN   version   of
DT::E::Sunrise, by computing the sunrise and sunset times in Boston in
April  2020, and  comparing with  values copied-pasted  from the  NOAA
solar calculator webpage and from Stellarium.

This program displays the values for sunrise and sunset produced by:

=over 4

=item * L<Astro::Sunrise>, basic algorithm

=item * L<Astro::Sunrise>, precise algorithm

=item * The NOAA solar calculator webpage

=item * Stellarium

=item * L<DateTime::Event::Sunrise>, basic algorithm

=item * L<DateTime::Event::Sunrise>, precise algorithm

=back

In the last two cases, the  program computes the difference in seconds
with the Stellarium value.

=head2 Why Boston? Why April?

Because there was a bug report for DT::E::Sunrise with precisely these
values.

=head2 First Conclusions

The  basic  algorithm  gives  results very  close  to  the  Stellarium
reference values: within 6 seconds  for sunrise, within 12 seconds for
sunset.

On the  other hand, the values  produced by the precise  algorithm are
much farther  from the reference  values: about 36 seconds  for sunset
and up to 99 seconds for sunrise.

=head1 SEE ALSO

L<https://rt.cpan.org/Public/Bug/Display.html?id=132336>

L<https://www.esrl.noaa.gov/gmd/grad/solcalc/table.php?lat=42.3358&lon=-71.2044&year=2020>

L<http://stellarium.org/>

=head1 COPYRIGHT

Copyright  (c)  2020, 2021  Jean  Forget.  All rights  reserved.  This
program is  free software;  you can redistribute  it and/or  modify it
under the same  terms as Perl itself: GNU Public  License version 1 or
later and Perl Artistic License.

The full text of the license can be found in the F<LICENSE> file at
L<https://dev.perl.org/licenses/artistic.html>
and L<https://www.gnu.org/licenses/gpl-1.0.html>.

Here is the summary of GPL:

This program is  free software; you can redistribute  it and/or modify
it under the  terms of the GNU General Public  License as published by
the Free  Software Foundation; either  version 1, or (at  your option)
any later version.

This program  is distributed in the  hope that it will  be useful, but
WITHOUT   ANY  WARRANTY;   without  even   the  implied   warranty  of
MERCHANTABILITY  or FITNESS  FOR A  PARTICULAR PURPOSE.   See  the GNU
General Public License for more details.

You  should have received  a copy  of the  GNU General  Public License
along with this program; if not, see <https://www.gnu.org/licenses/> or
write to the Free Software Foundation, Inc., L<https://fsf.org>.

